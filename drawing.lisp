(in-package :opengl-text)

(defgeneric get-char-texture-coords (char gl-text)
  (:method ((char character) (gl-text opengl-text))
    (let ((char-coords (gethash char (character-hash-of gl-text))))
      (if char-coords
	  char-coords
	  (add-char char gl-text)))))

(defun generate-vertices (vertices tex-coords string gl-text kerning depth-shift)
  (iter (with font = (font-loader-of gl-text))
	(with scaler = (scaler-of gl-text))
	(for c in-string string)
	(for g next (zpb-ttf:find-glyph c font))
	(for gp previous g initially nil)
	(for i from 0 by 4)
	(for j from 0)
	(when (and gp kerning)
	  (incf k (/ (zpb-ttf:kerning-offset gp g font) scaler)))
	(for (xmin ymin xmax ymax) next (compute-actual-slice c gl-text))
	(let ((vertex (make-array '(4 3)
				  :initial-contents
				  (list (list (+ k xmin) ymin (* j depth-shift))
					(list (- (1+ k) (- 1 xmax)) ymin (* j depth-shift))
					(list (- (1+ k) (- 1 xmax)) ymax (* j depth-shift))
					(list (+ k xmin) ymax (* j depth-shift)))))
	      (tex-coord (get-char-texture-coords c gl-text)))
	  (map-subarray vertex vertices :target-range `((,i ,(+ i 3)) :all))
	  (map-subarray tex-coord tex-coords :target-range `((,i ,(+ i 3)) :all)))
	(sum (/ (+ (zpb-ttf:advance-width g)) scaler) into k)))

(defgeneric draw-gl-string (string gl-text &key kerning depth-shift)
  (:method ((string string) (gl-text opengl-text) &key (kerning t) (depth-shift 0.0))
    (ensure-characters (remove-duplicates string) gl-text)
    (let ((l (length string)))
     (let ((vertices (make-ffa (list (* 4 l) 3) :float))
	   (tex-coords (make-ffa (list (* 4 l) 2) :float)))
       (generate-vertices vertices tex-coords string gl-text kerning depth-shift)
       (with-pointers-to-arrays ((vertices v-pointer :float (length (find-original-array vertices)) :copy-in)
				 (tex-coords t-pointer :float (length (find-original-array tex-coords)) :copy-in))
	 (%gl:vertex-pointer 3 :float 0 v-pointer)
	 (%gl:tex-coord-pointer 2 :float 0 t-pointer)
	 (gl:bind-texture :texture-2d (texture-number-of gl-text))
	 (gl:tex-env :texture-env :texture-env-mode :replace)
	 (gl:tex-parameter :texture-2d :texture-min-filter :linear)
	 (gl:tex-parameter :texture-2d :texture-mag-filter :linear)
	 (gl:with-pushed-matrix
	   (gl:scale (scale-to-unit-of gl-text)
		     (scale-to-unit-of gl-text)
		     1.0)
	   (let ((font (font-loader-of gl-text)))
	    (gl:translate (/ (- (zpb-ttf:xmin (zpb-ttf:bounding-box font))
				(zpb-ttf:xmin (zpb-ttf:bounding-box (zpb-ttf:find-glyph (char string 0) font))))
			     (scaler-of gl-text))
			  (/ (zpb-ttf:descender font) (scaler-of gl-text))
			  0))
	   (gl:draw-arrays :quads 0 (* 4 (length string)))))))))
