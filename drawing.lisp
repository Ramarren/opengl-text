(in-package :opengl-text)

(defgeneric get-glyph (char gl-text)
  (:method ((char character) (gl-text opengl-text))
    (or (gethash char (character-hash-of gl-text))
                      (add-char char gl-text))))

(defun generate-vertices (vertices tex-coords string gl-text kerning depth-shift)
  (iter (with font = (font-loader-of gl-text))
        (with scaler = (scaler-of gl-text))
        (with chash = (character-hash-of gl-text))
        (for c in-string string)
        (for g next (zpb-ttf:find-glyph c font))
        (for gp previous g initially nil)
        (for i from 0 by 4)
        (for j from 0)
        (when (and gp kerning)
          (incf k (/ (zpb-ttf:kerning-offset gp g font) scaler)))
        (for (xmin ymin xmax ymax) next (actual-slice-of (gethash c chash)))
        (setf (aref vertices i 0) (+ k xmin)
              (aref vertices i 1) ymin
              (aref vertices i 2) (* j depth-shift)
              (aref vertices (+ i 1) 0) (- (1+ k) (- 1 xmax))
              (aref vertices (+ i 1) 1) ymin
              (aref vertices (+ i 1) 2) (* j depth-shift)
              (aref vertices (+ i 2) 0) (- (1+ k) (- 1 xmax))
              (aref vertices (+ i 2) 1) ymax
              (aref vertices (+ i 2) 2) (* j depth-shift)
              (aref vertices (+ i 3) 0) (+ k xmin)
              (aref vertices (+ i 3) 1) ymax
              (aref vertices (+ i 3) 2) (* j depth-shift))
        (let ((tex-coord (tex-coord-of (get-glyph c gl-text))))
         (iter (for ii from i to (+ i 3))
               (for k from 0)
               (setf (aref tex-coords ii 0) (aref tex-coord k 0)
                     (aref tex-coords ii 1) (aref tex-coord k 1))))
        (sum (/ (+ (zpb-ttf:advance-width g)) scaler) into k)))

(defgeneric get-buffers (l gl-text)
  (:method ((l integer) (gl-text opengl-text))
    (let ((lg (length-of gl-text)))
      (when (and *auto-extend-buffers*
                 (> l (length-of gl-text)))
        (setf (length-of gl-text) l))
      (values (if (and (>= lg l)
                       (vertices-of gl-text))
                  (vertices-of gl-text)
                  (make-ffa (list (* 4 l) 3) :float))
              (if (and (>= lg l)
                       (tex-coords-of gl-text))
                  (tex-coords-of gl-text)
                  (make-ffa (list (* 4 l) 2) :float))))))

(defgeneric draw-gl-string (string gl-text &key kerning depth-shift)
  (:method ((string string) (gl-text opengl-text) &key (kerning t) (depth-shift 0.0))
    (ensure-characters (remove-duplicates string) gl-text)
    (let ((l (length string)))
     (when (zerop l) (return-from draw-gl-string))
     (multiple-value-bind (vertices tex-coords) (get-buffers l gl-text)
       (generate-vertices vertices tex-coords string gl-text kerning depth-shift)
       (with-pointers-to-arrays ((vertices v-pointer :float (length (find-original-array vertices)) :copy-in)
                                 (tex-coords t-pointer :float (length (find-original-array tex-coords)) :copy-in))
         (%gl:vertex-pointer 3 :float 0 v-pointer)
         (%gl:tex-coord-pointer 2 :float 0 t-pointer)
         (gl:bind-texture :texture-2d (texture-number-of gl-text))
         (gl:tex-env :texture-env :texture-env-mode :modulate)
         (gl:tex-parameter :texture-2d :texture-min-filter :linear)
         (gl:tex-parameter :texture-2d :texture-mag-filter :linear)
         (gl:with-pushed-matrix
           (gl:scale (scale-to-unit-of gl-text)
                     (scale-to-unit-of gl-text)
                     1.0)
           (let ((font (font-loader-of gl-text)))
            (gl:translate (/ (- (zpb-ttf:xmin (zpb-ttf:bounding-box font))
                                (zpb-ttf:xmin (zpb-ttf:bounding-box (zpb-ttf:find-glyph (char string 0) font))))
                             (scaler-of gl-text))
                          (/ (zpb-ttf:descender font) (scaler-of gl-text))
                          0))
           (gl:draw-arrays :quads 0 (* 4 (length string)))))))))
